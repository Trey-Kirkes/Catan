import pygame
import math
import random

# Initialize Pygame
pygame.init()

# Constants
WIDTH, HEIGHT = 1440, 960
HEX_SIZE = 80  
HEX_SPACING = 1.5  
OFFSET_X = 720
OFFSET_Y = 240

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
BLUE = (20, 80, 250)
TAN = (225, 200, 125)

# Resources and their counts
resource_colors = {
    "wood": (34, 139, 34),
    "sheep": (117, 210, 43),
    "brick": (179, 89, 0),
    "wheat": (210, 194, 43),
    "ore": (19, 19, 18),
    "desert": (228, 197, 132)
}

# Resources and their desired counts
resource_counts = {
    "wood": 4,
    "sheep": 4,
    "brick": 3,
    "wheat": 4,
    "ore": 3,
    "desert": 1
}

numbers = [(2, 1),
           (3, 2),
           (4, 2),
           (5, 2),
           (6, 2),
           (8, 2),
           (9, 2),
           (10, 2),
           (11, 2),
           (12, 1)]

# Create a Pygame window
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Hexagonal Grid")

def hexagon_points(center, size):
    angle = 360 / 6  # Angle between each vertex of the hexagon
    points = []
    for i in range(6):
        x = center[0] + size * math.sin(math.radians(i * angle))
        y = center[1] + size * math.cos(math.radians(i * angle))
        points.append((x, y))

    return points

# Define hexagon drawing function
def draw_hexagon(center, size):
    points = hexagon_points(center, size)
    pygame.draw.polygon(screen, BLACK, points, 2)

# Function to calculate hexagon centers based on grid pattern
def calculate_hex_centers():
    hex_centers = []
    row_lengths = [3, 4, 5, 4, 3]

    for row, row_length in enumerate(row_lengths):
        y = row * (HEX_SIZE * 1.5) + OFFSET_Y
        x_start = OFFSET_X - (row_length - 1) * (HEX_SIZE * math.sqrt(3) + HEX_SPACING) / 2

        for col in range(row_length):
            x = x_start + col * (HEX_SIZE * math.sqrt(3) + HEX_SPACING)
            hex_centers.append((x, y))

    return hex_centers

def assign_resources(hex_centers, resource_counts):
    hex_mapping = {}

    for center, (resource, color) in zip(hex_centers, resource_counts.items()):
        hex_mapping[center] = (resource, resource_colors[resource])
        pygame.draw.polygon(screen, color, hexagon_points(center, HEX_SIZE), 0)
        draw_hexagon(center, HEX_SIZE)

    random.shuffle(hex_centers)  # Shuffle the hex centers for drawing circles

    return hex_mapping  # Return the hex_mapping dictionary


# def assign_resources(hex_centers, resource_counts):
#     hex_mapping = []

#     for resource, count in resource_counts.items():
#         for _ in range(count):
#             hex_mapping[center] = (resource, resource_colors[resource])
#             hex_mapping.append((resource, resource_colors[resource]))


#     random.shuffle(hex_mapping)
    
#     for center in hex_centers:
#         resource, color = hex_mapping.pop()
#         pygame.draw.polygon(screen, color, hexagon_points(center, HEX_SIZE), 0)
#         draw_hexagon(center, HEX_SIZE)

#    return hex_mapping 

# def draw_circles(circle_centers, hex_mapping):
#     number_list = [number for number, frequency in numbers for _ in range(frequency)]
#     random.shuffle(number_list)

#     for center in circle_centers:
#         if hex_mapping[center][0] != "desert":
#             number = number_list.pop()
#             pygame.draw.circle(screen, TAN, center, 20, 0)
#             font = pygame.font.Font(None, 36)
#             text = font.render(str(number), True, BLACK)
#             text_rect = text.get_rect(center=center)
#             screen.blit(text, text_rect)
#         else:
#             break

def draw_circles(circle_centers, hex_mapping):
    number_list = [number for number, frequency in numbers for _ in range(frequency)]
    random.shuffle(number_list)

    for center in circle_centers:
        resource, _ = hex_mapping.get(center, ("", (255, 255, 255)))
        if resource != "desert":
            number = number_list.pop()
            pygame.draw.circle(screen, TAN, center, 20, 0)
            font = pygame.font.Font(None, 36)
            if number == 6:
                text = font.render(str(number), True, (200, 0, 0))
            elif number == 8:
                text = font.render(str(number), True, (200, 0, 0))
            else:
                text = font.render(str(number), True, (0, 0, 0))
            text_rect = text.get_rect(center=center)
            screen.blit(text, text_rect)
        else:
            pygame.draw.circle(screen, TAN, center, 0, 0)




# Main loop
running = True
hex_centers = calculate_hex_centers()
hex_mapping = assign_resources(hex_centers, resource_counts)
draw_circles(hex_centers, hex_mapping)
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    pygame.display.flip()

pygame.quit()
